services:
  db:
    image: postgres:16
    container_name: mb_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-movie_db}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./data/db_dump.sql:/docker-entrypoint-initdb.d/01_init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mb_backend
    working_dir: /backend
    env_file:
      - .env
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-movie_db}
      DB_USER: ${POSTGRES_USER:-user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-password}
      ALLOW_ORIGINS: ${ALLOW_ORIGINS:-*}
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "8000:8000"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mb_frontend
    depends_on:
      - backend
    expose:
      - "80"
    volumes:
      - ./data/img:/usr/share/nginx/html/img:ro

  gateway:
    image: nginx:1.27-alpine
    container_name: mb_gateway
    depends_on:
      - frontend
      - backend
    ports:
      - "${APP_PORT:-8080}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data/img:/var/www/img:ro

volumes:
  pgdata:
